#!/bin/bash
# labbox - poor-man's dropbox for Mac. Requires fswatch (brew install fswatch).
#
# Project home: https://github.com/fordsfords/labbox
#
# License: CC0 (equiv to public domain). Any use, no attribution required.

FILE="$1"
if [ -z "$FILE" ]; then :
  echo "Usage: labbox LabDir [rsync_opts]" >&2
  exit 1
fi
shift  # Get rid of file.

HOST="amun.29west.com"
if [ -n "$LABBOX_HOST" ]; then :
  HOST="$LABBOX_HOST"
fi

trap "exit 1" 1 2 3 15

EXCL='--exclude "*.pcap" --exclude "*.log" --exclude "mac/" --exclude "x" --exclude "x.*" --exclude "*.x" --exclude ".git"'
if [ -f "labbox.exclude" ]; then :
  EXCL=""
  while read E; do :
    EXCL="$EXCL --exclude \"$E\""
  done <labbox.exclude
fi

FSEXCL='--exclude ".*\.pcap$" --exclude ".*/mac/.*" --exclude ".*/mac$" --exclude ".*/x$" --exclude ".*/x\..*" --exclude ".*\.x$" --exclude ".*/\.git.*"'
if [ -f "labbox.fsexclude" ]; then :
  FSEXCL=""
  while read E; do :
    FSEXCL="$FSEXCL --exclude \"$E\""
  done <labbox.fsexclude
fi

# -a (archive) turns on -rlptgoD
#   -r: recursive; -l: copy symlinks as symlinks; -p: permissions
#   -t: preserve time; -goD: preserve group, owner, and device files
OPTS="-azq"
if [ -n "$LABBOX_OPTS" ]; then :
  OPTS="$LABBOX_OPTS"
fi

echo "fswatch use: fswatch $FSEXCL -r -x ."
echo -n -e "\033]0;Init\007"
echo "starting initial sync $FILE $HOST ($EXCL)" `date`
ssh $HOST mkdir -p $FILE >/dev/null 2>&1
echo "rsync $OPTS $EXCL $* . $HOST:$FILE (`date`)"
eval "rsync </dev/null $OPTS $EXCL $* . $HOST:$FILE"
echo "done" `date`

# Use poll_monitor because vi usually does two changes per write and
# there is a certain unpredictability in them.  With poll_monitor, you
# always get exactly one "Updated" per vi write.
echo -n -e "\033]0;Idle\007"
eval fswatch $FSEXCL -r -x . | while true; do :
  # wait for update
  read ILINE
  echo "$ILINE"
  # flush updates
  while read -t 1 ILINE; do echo "$ILINE"; done
  echo -n -e "\033]0;Transfer\007"
  echo "rsync $OPTS $EXCL $* . $HOST:$FILE (`date`)"
  eval "rsync </dev/null $OPTS $EXCL $* . $HOST:$FILE"
  echo -n -e "\033]0;Sync\007"
  echo "ssh sync (`date`)"
  ssh </dev/null $HOST sync
  echo "done (`date`)"
  echo -n -e "\033]0;Idle\007"
done
